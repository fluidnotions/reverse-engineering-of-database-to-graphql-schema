schema {
  query: GraphQLJPAQuery
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Actor {
  firstName(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastName(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
}

"Query response wrapper object for Actor.  When page is requested, this object will be returned with query metadata."
type Actors {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Actor]
  "Total number of records in the database for this query."
  total: Long
}

type Address {
  address(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  address2(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  city(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: CitiesCriteriaExpression
  ): City
  district(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  phone(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  postalCode(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
}

"Query response wrapper object for Address.  When page is requested, this object will be returned with query metadata."
type Addresses {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Address]
  "Total number of records in the database for this query."
  total: Long
}

"Query response wrapper object for Category.  When page is requested, this object will be returned with query metadata."
type Categories {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Category]
  "Total number of records in the database for this query."
  total: Long
}

type Category {
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  name(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
}

"Query response wrapper object for City.  When page is requested, this object will be returned with query metadata."
type Cities {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [City]
  "Total number of records in the database for this query."
  total: Long
}

type City {
  city(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  country(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: CountriesCriteriaExpression
  ): Country
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
}

"Query response wrapper object for Country.  When page is requested, this object will be returned with query metadata."
type Countries {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Country]
  "Total number of records in the database for this query."
  total: Long
}

type Country {
  country(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
}

type Customer {
  active(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  activebool(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Boolean
  address(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: AddressesCriteriaExpression
  ): Address
  createDate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): LocalDate
  email(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  firstName(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastName(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  storeId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
}

"Query response wrapper object for Customer.  When page is requested, this object will be returned with query metadata."
type Customers {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Customer]
  "Total number of records in the database for this query."
  total: Long
}

type Film {
  description(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  fulltext(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  language(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: LanguagesCriteriaExpression
  ): Language
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  length(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
  releaseYear(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  rentalDuration(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
  rentalRate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): BigDecimal
  replacementCost(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): BigDecimal
  specialFeatures(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): List
  title(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
}

type FilmActor {
  actor(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: ActorsCriteriaExpression
  ): Actor
  film(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: FilmsCriteriaExpression
  ): Film
  id(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: FilmActorIdsCriteriaExpression
  ): FilmActorIdEmbeddableType
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
}

type FilmActorIdEmbeddableType {
  actorId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
  filmId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
}

"Query response wrapper object for FilmActor.  When page is requested, this object will be returned with query metadata."
type FilmActors {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [FilmActor]
  "Total number of records in the database for this query."
  total: Long
}

"Query response wrapper object for FilmCategory.  When page is requested, this object will be returned with query metadata."
type FilmCategories {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [FilmCategory]
  "Total number of records in the database for this query."
  total: Long
}

type FilmCategory {
  category(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: CategoriesCriteriaExpression
  ): Category
  film(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: FilmsCriteriaExpression
  ): Film
  id(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: FilmCategoryIdsCriteriaExpression
  ): FilmCategoryIdEmbeddableType
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
}

type FilmCategoryIdEmbeddableType {
  categoryId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
  filmId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
}

"Query response wrapper object for Film.  When page is requested, this object will be returned with query metadata."
type Films {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Film]
  "Total number of records in the database for this query."
  total: Long
}

"GraphQL Schema for all entities in this JPA application"
type GraphQLJPAQuery {
  Actor(id: Int): Actor
  "Query request wrapper for Actor to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Actors(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: ActorsCriteriaExpression
  ): Actors
  Address(id: Int): Address
  "Query request wrapper for Address to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Addresses(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: AddressesCriteriaExpression
  ): Addresses
  "Query request wrapper for Category to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Categories(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: CategoriesCriteriaExpression
  ): Categories
  Category(id: Int): Category
  "Query request wrapper for City to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Cities(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: CitiesCriteriaExpression
  ): Cities
  City(id: Int): City
  "Query request wrapper for Country to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Countries(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: CountriesCriteriaExpression
  ): Countries
  Country(id: Int): Country
  Customer(id: Int): Customer
  "Query request wrapper for Customer to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Customers(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: CustomersCriteriaExpression
  ): Customers
  Film(id: Int): Film
  FilmActor(id: FilmActorIdInputEmbeddableIdType): FilmActor
  "Query request wrapper for FilmActor to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  FilmActors(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: FilmActorsCriteriaExpression
  ): FilmActors
  "Query request wrapper for FilmCategory to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  FilmCategories(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: FilmCategoriesCriteriaExpression
  ): FilmCategories
  FilmCategory(id: FilmCategoryIdInputEmbeddableIdType): FilmCategory
  "Query request wrapper for Film to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Films(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: FilmsCriteriaExpression
  ): Films
  "Query request wrapper for Inventory to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Inventories(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: InventoriesCriteriaExpression
  ): Inventories
  Inventory(id: Int): Inventory
  Language(id: Int): Language
  "Query request wrapper for Language to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Languages(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: LanguagesCriteriaExpression
  ): Languages
  Payment(id: Int): Payment
  "Query request wrapper for Payment to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Payments(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: PaymentsCriteriaExpression
  ): Payments
  Rental(id: Int): Rental
  "Query request wrapper for Rental to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Rentals(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: RentalsCriteriaExpression
  ): Rentals
  Staff(id: Int): Staff
  "Query request wrapper for Staff to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Staffs(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: StaffsCriteriaExpression
  ): Staffs
  Store(id: Int): Store
  "Query request wrapper for Store to request paginated data. Use query request arguments to specify query filter criterias. Use the 'select' field to request actual fields. Use the 'orderBy' on a field to specify sort order for each field. "
  Stores(
    "Page object for pageble requests, specifying the requested start page and limit size."
    page: Page,
    "Where logical specification"
    where: StoresCriteriaExpression
  ): Stores
}

"Query response wrapper object for Inventory.  When page is requested, this object will be returned with query metadata."
type Inventories {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Inventory]
  "Total number of records in the database for this query."
  total: Long
}

type Inventory {
  film(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: FilmsCriteriaExpression
  ): Film
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  storeId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
}

type Language {
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  name(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
}

"Query response wrapper object for Language.  When page is requested, this object will be returned with query metadata."
type Languages {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Language]
  "Total number of records in the database for this query."
  total: Long
}

type Payment {
  amount(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): BigDecimal
  customer(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: CustomersCriteriaExpression
  ): Customer
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  paymentDate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  rental(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: RentalsCriteriaExpression
  ): Rental
  staff(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: StaffsCriteriaExpression
  ): Staff
}

"Query response wrapper object for Payment.  When page is requested, this object will be returned with query metadata."
type Payments {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Payment]
  "Total number of records in the database for this query."
  total: Long
}

type Rental {
  customer(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: CustomersCriteriaExpression
  ): Customer
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  inventory(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: InventoriesCriteriaExpression
  ): Inventory
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  rentalDate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  returnDate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  staff(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: StaffsCriteriaExpression
  ): Staff
}

"Query response wrapper object for Rental.  When page is requested, this object will be returned with query metadata."
type Rentals {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Rental]
  "Total number of records in the database for this query."
  total: Long
}

type Staff {
  active(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Boolean
  address(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: AddressesCriteriaExpression
  ): Address
  email(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  firstName(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastName(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  password(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
  picture(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): [Byte]
  storeId(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Short
  username(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): String
}

"Query response wrapper object for Staff.  When page is requested, this object will be returned with query metadata."
type Staffs {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Staff]
  "Total number of records in the database for this query."
  total: Long
}

type Store {
  address(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: AddressesCriteriaExpression
  ): Address
  id(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Int
  lastUpdate(
    "Specifies field sort direction in the query results."
    orderBy: OrderBy = ASC
  ): Instant
  managerStaff(
    "Optional association specification"
    optional: Boolean = false,
    "Where logical specification"
    where: StaffsCriteriaExpression
  ): Staff
}

"Query response wrapper object for Store.  When page is requested, this object will be returned with query metadata."
type Stores {
  "Total number of pages calculated on the database for this page size."
  pages: Long
  "The queried records container"
  select: [Store]
  "Total number of records in the database for this query."
  total: Long
}

"Specifies the direction (Ascending / Descending) to sort a field."
enum OrderBy {
  "Ascending"
  ASC
  "Descending"
  DESC
}

"An arbitrary precision signed decimal"
scalar BigDecimal

"An 8-bit signed integer"
scalar Byte

"Instant type"
scalar Instant

"List Scalar Object Type"
scalar List

"LocalDate type"
scalar LocalDate

"A 64-bit signed integer"
scalar Long

"A 16-bit signed integer"
scalar Short

"Where logical AND specification of the provided list of criteria expressions"
input ActorsCriteriaExpression {
  "Logical operation for expressions"
  AND: [ActorsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [ActorsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [ActorsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [ActorsCriteriaExpression]
  firstName: firstNameActorCriteria
  id: idActorCriteria
  lastName: lastNameActorCriteria
  lastUpdate: lastUpdateActorCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input ActorsRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [ActorsRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [ActorsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [ActorsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [ActorsRelationCriteriaExpression]
  firstName: firstNameActorCriteria
  id: idActorCriteria
  lastName: lastNameActorCriteria
  lastUpdate: lastUpdateActorCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input ActorsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [ActorsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [ActorsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [ActorsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [ActorsSubqueryCriteriaExpression]
}

"Where logical AND specification of the provided list of criteria expressions"
input AddressesCriteriaExpression {
  "Logical operation for expressions"
  AND: [AddressesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [AddressesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [AddressesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [AddressesCriteriaExpression]
  address: addressAddressCriteria
  address2: address2AddressCriteria
  city: CitiesRelationCriteriaExpression
  district: districtAddressCriteria
  id: idAddressCriteria
  lastUpdate: lastUpdateAddressCriteria
  phone: phoneAddressCriteria
  postalCode: postalCodeAddressCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input AddressesRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [AddressesRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [AddressesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [AddressesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [AddressesRelationCriteriaExpression]
  address: addressAddressCriteria
  address2: address2AddressCriteria
  city: CitiesRelationCriteriaExpression
  district: districtAddressCriteria
  id: idAddressCriteria
  lastUpdate: lastUpdateAddressCriteria
  phone: phoneAddressCriteria
  postalCode: postalCodeAddressCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input AddressesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [AddressesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [AddressesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [AddressesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [AddressesSubqueryCriteriaExpression]
  city: CitiesRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input CategoriesCriteriaExpression {
  "Logical operation for expressions"
  AND: [CategoriesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CategoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CategoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CategoriesCriteriaExpression]
  id: idCategoryCriteria
  lastUpdate: lastUpdateCategoryCriteria
  name: nameCategoryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CategoriesRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [CategoriesRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CategoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CategoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CategoriesRelationCriteriaExpression]
  id: idCategoryCriteria
  lastUpdate: lastUpdateCategoryCriteria
  name: nameCategoryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CategoriesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [CategoriesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CategoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CategoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CategoriesSubqueryCriteriaExpression]
}

"Where logical AND specification of the provided list of criteria expressions"
input CitiesCriteriaExpression {
  "Logical operation for expressions"
  AND: [CitiesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CitiesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CitiesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CitiesCriteriaExpression]
  city: cityCityCriteria
  country: CountriesRelationCriteriaExpression
  id: idCityCriteria
  lastUpdate: lastUpdateCityCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CitiesRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [CitiesRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CitiesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CitiesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CitiesRelationCriteriaExpression]
  city: cityCityCriteria
  country: CountriesRelationCriteriaExpression
  id: idCityCriteria
  lastUpdate: lastUpdateCityCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CitiesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [CitiesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CitiesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CitiesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CitiesSubqueryCriteriaExpression]
  country: CountriesRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input CountriesCriteriaExpression {
  "Logical operation for expressions"
  AND: [CountriesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CountriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CountriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CountriesCriteriaExpression]
  country: countryCountryCriteria
  id: idCountryCriteria
  lastUpdate: lastUpdateCountryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CountriesRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [CountriesRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CountriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CountriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CountriesRelationCriteriaExpression]
  country: countryCountryCriteria
  id: idCountryCriteria
  lastUpdate: lastUpdateCountryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CountriesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [CountriesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CountriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CountriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CountriesSubqueryCriteriaExpression]
}

"Where logical AND specification of the provided list of criteria expressions"
input CustomersCriteriaExpression {
  "Logical operation for expressions"
  AND: [CustomersCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CustomersSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CustomersSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CustomersCriteriaExpression]
  active: activeCustomerCriteria
  activebool: activeboolCustomerCriteria
  address: AddressesRelationCriteriaExpression
  createDate: createDateCustomerCriteria
  email: emailCustomerCriteria
  firstName: firstNameCustomerCriteria
  id: idCustomerCriteria
  lastName: lastNameCustomerCriteria
  lastUpdate: lastUpdateCustomerCriteria
  storeId: storeIdCustomerCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CustomersRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [CustomersRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CustomersSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CustomersSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CustomersRelationCriteriaExpression]
  active: activeCustomerCriteria
  activebool: activeboolCustomerCriteria
  address: AddressesRelationCriteriaExpression
  createDate: createDateCustomerCriteria
  email: emailCustomerCriteria
  firstName: firstNameCustomerCriteria
  id: idCustomerCriteria
  lastName: lastNameCustomerCriteria
  lastUpdate: lastUpdateCustomerCriteria
  storeId: storeIdCustomerCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input CustomersSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [CustomersSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [CustomersSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [CustomersSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [CustomersSubqueryCriteriaExpression]
  address: AddressesRelationCriteriaExpression
}

input FilmActorIdInputEmbeddableIdType {
  actorId: Short
  filmId: Short
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmActorIdsCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmActorIdsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmActorIdsCriteriaExpression]
  actorId: actorIdFilmActorIdCriteria
  filmId: filmIdFilmActorIdCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmActorIdsRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmActorIdsRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmActorIdsRelationCriteriaExpression]
  actorId: actorIdFilmActorIdCriteria
  filmId: filmIdFilmActorIdCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmActorIdsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmActorIdsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmActorIdsSubqueryCriteriaExpression]
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmActorsCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmActorsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmActorsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmActorsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmActorsCriteriaExpression]
  actor: ActorsRelationCriteriaExpression
  film: FilmsRelationCriteriaExpression
  id: FilmActorIdsRelationCriteriaExpression
  lastUpdate: lastUpdateFilmActorCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmActorsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmActorsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmActorsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmActorsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmActorsSubqueryCriteriaExpression]
  actor: ActorsRelationCriteriaExpression
  film: FilmsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmCategoriesCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmCategoriesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmCategoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmCategoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmCategoriesCriteriaExpression]
  category: CategoriesRelationCriteriaExpression
  film: FilmsRelationCriteriaExpression
  id: FilmCategoryIdsRelationCriteriaExpression
  lastUpdate: lastUpdateFilmCategoryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmCategoriesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmCategoriesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmCategoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmCategoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmCategoriesSubqueryCriteriaExpression]
  category: CategoriesRelationCriteriaExpression
  film: FilmsRelationCriteriaExpression
}

input FilmCategoryIdInputEmbeddableIdType {
  categoryId: Short
  filmId: Short
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmCategoryIdsCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmCategoryIdsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmCategoryIdsCriteriaExpression]
  categoryId: categoryIdFilmCategoryIdCriteria
  filmId: filmIdFilmCategoryIdCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmCategoryIdsRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmCategoryIdsRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmCategoryIdsRelationCriteriaExpression]
  categoryId: categoryIdFilmCategoryIdCriteria
  filmId: filmIdFilmCategoryIdCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmCategoryIdsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmCategoryIdsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmCategoryIdsSubqueryCriteriaExpression]
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmsCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmsCriteriaExpression]
  description: descriptionFilmCriteria
  fulltext: fulltextFilmCriteria
  id: idFilmCriteria
  language: LanguagesRelationCriteriaExpression
  lastUpdate: lastUpdateFilmCriteria
  length: lengthFilmCriteria
  releaseYear: releaseYearFilmCriteria
  rentalDuration: rentalDurationFilmCriteria
  rentalRate: rentalRateFilmCriteria
  replacementCost: replacementCostFilmCriteria
  specialFeatures: specialFeaturesFilmCriteria
  title: titleFilmCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmsRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmsRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmsRelationCriteriaExpression]
  description: descriptionFilmCriteria
  fulltext: fulltextFilmCriteria
  id: idFilmCriteria
  language: LanguagesRelationCriteriaExpression
  lastUpdate: lastUpdateFilmCriteria
  length: lengthFilmCriteria
  releaseYear: releaseYearFilmCriteria
  rentalDuration: rentalDurationFilmCriteria
  rentalRate: rentalRateFilmCriteria
  replacementCost: replacementCostFilmCriteria
  specialFeatures: specialFeaturesFilmCriteria
  title: titleFilmCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input FilmsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [FilmsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [FilmsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [FilmsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [FilmsSubqueryCriteriaExpression]
  language: LanguagesRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input InventoriesCriteriaExpression {
  "Logical operation for expressions"
  AND: [InventoriesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [InventoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [InventoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [InventoriesCriteriaExpression]
  film: FilmsRelationCriteriaExpression
  id: idInventoryCriteria
  lastUpdate: lastUpdateInventoryCriteria
  storeId: storeIdInventoryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input InventoriesRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [InventoriesRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [InventoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [InventoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [InventoriesRelationCriteriaExpression]
  film: FilmsRelationCriteriaExpression
  id: idInventoryCriteria
  lastUpdate: lastUpdateInventoryCriteria
  storeId: storeIdInventoryCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input InventoriesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [InventoriesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [InventoriesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [InventoriesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [InventoriesSubqueryCriteriaExpression]
  film: FilmsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input LanguagesCriteriaExpression {
  "Logical operation for expressions"
  AND: [LanguagesCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [LanguagesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [LanguagesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [LanguagesCriteriaExpression]
  id: idLanguageCriteria
  lastUpdate: lastUpdateLanguageCriteria
  name: nameLanguageCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input LanguagesRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [LanguagesRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [LanguagesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [LanguagesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [LanguagesRelationCriteriaExpression]
  id: idLanguageCriteria
  lastUpdate: lastUpdateLanguageCriteria
  name: nameLanguageCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input LanguagesSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [LanguagesSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [LanguagesSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [LanguagesSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [LanguagesSubqueryCriteriaExpression]
}

"Page fields for pageble requests."
input Page {
  "Limit how many results should this page contain"
  limit: Int
  "Start page that should be returned. Page numbers start with 1 (1-indexed)"
  start: Int = 1
}

"Where logical AND specification of the provided list of criteria expressions"
input PaymentsCriteriaExpression {
  "Logical operation for expressions"
  AND: [PaymentsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [PaymentsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [PaymentsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [PaymentsCriteriaExpression]
  amount: amountPaymentCriteria
  customer: CustomersRelationCriteriaExpression
  id: idPaymentCriteria
  paymentDate: paymentDatePaymentCriteria
  rental: RentalsRelationCriteriaExpression
  staff: StaffsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input PaymentsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [PaymentsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [PaymentsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [PaymentsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [PaymentsSubqueryCriteriaExpression]
  customer: CustomersRelationCriteriaExpression
  rental: RentalsRelationCriteriaExpression
  staff: StaffsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input RentalsCriteriaExpression {
  "Logical operation for expressions"
  AND: [RentalsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [RentalsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [RentalsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [RentalsCriteriaExpression]
  customer: CustomersRelationCriteriaExpression
  id: idRentalCriteria
  inventory: InventoriesRelationCriteriaExpression
  lastUpdate: lastUpdateRentalCriteria
  rentalDate: rentalDateRentalCriteria
  returnDate: returnDateRentalCriteria
  staff: StaffsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input RentalsRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [RentalsRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [RentalsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [RentalsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [RentalsRelationCriteriaExpression]
  customer: CustomersRelationCriteriaExpression
  id: idRentalCriteria
  inventory: InventoriesRelationCriteriaExpression
  lastUpdate: lastUpdateRentalCriteria
  rentalDate: rentalDateRentalCriteria
  returnDate: returnDateRentalCriteria
  staff: StaffsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input RentalsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [RentalsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [RentalsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [RentalsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [RentalsSubqueryCriteriaExpression]
  customer: CustomersRelationCriteriaExpression
  inventory: InventoriesRelationCriteriaExpression
  staff: StaffsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input StaffsCriteriaExpression {
  "Logical operation for expressions"
  AND: [StaffsCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [StaffsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [StaffsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [StaffsCriteriaExpression]
  active: activeStaffCriteria
  address: AddressesRelationCriteriaExpression
  email: emailStaffCriteria
  firstName: firstNameStaffCriteria
  id: idStaffCriteria
  lastName: lastNameStaffCriteria
  lastUpdate: lastUpdateStaffCriteria
  password: passwordStaffCriteria
  picture: pictureStaffCriteria
  storeId: storeIdStaffCriteria
  username: usernameStaffCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input StaffsRelationCriteriaExpression {
  "Logical operation for expressions"
  AND: [StaffsRelationCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [StaffsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [StaffsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [StaffsRelationCriteriaExpression]
  active: activeStaffCriteria
  address: AddressesRelationCriteriaExpression
  email: emailStaffCriteria
  firstName: firstNameStaffCriteria
  id: idStaffCriteria
  lastName: lastNameStaffCriteria
  lastUpdate: lastUpdateStaffCriteria
  password: passwordStaffCriteria
  picture: pictureStaffCriteria
  storeId: storeIdStaffCriteria
  username: usernameStaffCriteria
}

"Where logical AND specification of the provided list of criteria expressions"
input StaffsSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [StaffsSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [StaffsSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [StaffsSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [StaffsSubqueryCriteriaExpression]
  address: AddressesRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input StoresCriteriaExpression {
  "Logical operation for expressions"
  AND: [StoresCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [StoresSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [StoresSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [StoresCriteriaExpression]
  address: AddressesRelationCriteriaExpression
  id: idStoreCriteria
  lastUpdate: lastUpdateStoreCriteria
  managerStaff: StaffsRelationCriteriaExpression
}

"Where logical AND specification of the provided list of criteria expressions"
input StoresSubqueryCriteriaExpression {
  "Logical operation for expressions"
  AND: [StoresSubqueryCriteriaExpression]
  "Logical EXISTS subquery expression"
  EXISTS: [StoresSubqueryCriteriaExpression]
  "Logical NOT EXISTS subquery expression"
  NOT_EXISTS: [StoresSubqueryCriteriaExpression]
  "Logical operation for expressions"
  OR: [StoresSubqueryCriteriaExpression]
  address: AddressesRelationCriteriaExpression
  managerStaff: StaffsRelationCriteriaExpression
}

"Criteria expression specification of active attribute in entity class com.example.dvdrental.data.model.Customer"
input activeCustomerCriteria {
  "Logical AND criteria expression"
  AND: [activeCustomerCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [activeCustomerCriteria]
}

"Criteria expression specification of active attribute in entity class com.example.dvdrental.data.model.Staff"
input activeStaffCriteria {
  "Logical AND criteria expression"
  AND: [activeStaffCriteria]
  "Between criteria"
  BETWEEN: [Boolean]
  "Equals criteria"
  EQ: Boolean
  "Greater or Equals criteria"
  GE: Boolean
  "Greater Then criteria"
  GT: Boolean
  "In criteria"
  IN: [Boolean]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Boolean
  "Less Then criteria"
  LT: Boolean
  "Not Equals criteria"
  NE: Boolean
  "Not In criteria"
  NIN: [Boolean]
  "Not Between criteria"
  NOT_BETWEEN: [Boolean]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [activeStaffCriteria]
}

"Criteria expression specification of activebool attribute in entity class com.example.dvdrental.data.model.Customer"
input activeboolCustomerCriteria {
  "Logical AND criteria expression"
  AND: [activeboolCustomerCriteria]
  "Between criteria"
  BETWEEN: [Boolean]
  "Equals criteria"
  EQ: Boolean
  "Greater or Equals criteria"
  GE: Boolean
  "Greater Then criteria"
  GT: Boolean
  "In criteria"
  IN: [Boolean]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Boolean
  "Less Then criteria"
  LT: Boolean
  "Not Equals criteria"
  NE: Boolean
  "Not In criteria"
  NIN: [Boolean]
  "Not Between criteria"
  NOT_BETWEEN: [Boolean]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [activeboolCustomerCriteria]
}

"Criteria expression specification of actorId attribute in entity class com.example.dvdrental.data.model.FilmActorId"
input actorIdFilmActorIdCriteria {
  "Logical AND criteria expression"
  AND: [actorIdFilmActorIdCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [actorIdFilmActorIdCriteria]
}

"Criteria expression specification of address2 attribute in entity class com.example.dvdrental.data.model.Address"
input address2AddressCriteria {
  "Logical AND criteria expression"
  AND: [address2AddressCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [address2AddressCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of address attribute in entity class com.example.dvdrental.data.model.Address"
input addressAddressCriteria {
  "Logical AND criteria expression"
  AND: [addressAddressCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [addressAddressCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of amount attribute in entity class com.example.dvdrental.data.model.Payment"
input amountPaymentCriteria {
  "Logical AND criteria expression"
  AND: [amountPaymentCriteria]
  "Between criteria"
  BETWEEN: [BigDecimal]
  "Equals criteria"
  EQ: BigDecimal
  "Greater or Equals criteria"
  GE: BigDecimal
  "Greater Then criteria"
  GT: BigDecimal
  "In criteria"
  IN: [BigDecimal]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: BigDecimal
  "Less Then criteria"
  LT: BigDecimal
  "Not Equals criteria"
  NE: BigDecimal
  "Not In criteria"
  NIN: [BigDecimal]
  "Not Between criteria"
  NOT_BETWEEN: [BigDecimal]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [amountPaymentCriteria]
}

"Criteria expression specification of categoryId attribute in entity class com.example.dvdrental.data.model.FilmCategoryId"
input categoryIdFilmCategoryIdCriteria {
  "Logical AND criteria expression"
  AND: [categoryIdFilmCategoryIdCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [categoryIdFilmCategoryIdCriteria]
}

"Criteria expression specification of city attribute in entity class com.example.dvdrental.data.model.City"
input cityCityCriteria {
  "Logical AND criteria expression"
  AND: [cityCityCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [cityCityCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of country attribute in entity class com.example.dvdrental.data.model.Country"
input countryCountryCriteria {
  "Logical AND criteria expression"
  AND: [countryCountryCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [countryCountryCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of createDate attribute in entity class com.example.dvdrental.data.model.Customer"
input createDateCustomerCriteria {
  "Logical AND criteria expression"
  AND: [createDateCustomerCriteria]
  "Between criteria"
  BETWEEN: [LocalDate]
  "Equals criteria"
  EQ: LocalDate
  "Greater or Equals criteria"
  GE: LocalDate
  "Greater Then criteria"
  GT: LocalDate
  "In criteria"
  IN: [LocalDate]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: LocalDate
  "Less Then criteria"
  LT: LocalDate
  "Not Equals criteria"
  NE: LocalDate
  "Not In criteria"
  NIN: [LocalDate]
  "Not Between criteria"
  NOT_BETWEEN: [LocalDate]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [createDateCustomerCriteria]
}

"Criteria expression specification of description attribute in entity class com.example.dvdrental.data.model.Film"
input descriptionFilmCriteria {
  "Logical AND criteria expression"
  AND: [descriptionFilmCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [descriptionFilmCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of district attribute in entity class com.example.dvdrental.data.model.Address"
input districtAddressCriteria {
  "Logical AND criteria expression"
  AND: [districtAddressCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [districtAddressCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of email attribute in entity class com.example.dvdrental.data.model.Customer"
input emailCustomerCriteria {
  "Logical AND criteria expression"
  AND: [emailCustomerCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [emailCustomerCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of email attribute in entity class com.example.dvdrental.data.model.Staff"
input emailStaffCriteria {
  "Logical AND criteria expression"
  AND: [emailStaffCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [emailStaffCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of filmId attribute in entity class com.example.dvdrental.data.model.FilmActorId"
input filmIdFilmActorIdCriteria {
  "Logical AND criteria expression"
  AND: [filmIdFilmActorIdCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [filmIdFilmActorIdCriteria]
}

"Criteria expression specification of filmId attribute in entity class com.example.dvdrental.data.model.FilmCategoryId"
input filmIdFilmCategoryIdCriteria {
  "Logical AND criteria expression"
  AND: [filmIdFilmCategoryIdCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [filmIdFilmCategoryIdCriteria]
}

"Criteria expression specification of firstName attribute in entity class com.example.dvdrental.data.model.Actor"
input firstNameActorCriteria {
  "Logical AND criteria expression"
  AND: [firstNameActorCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [firstNameActorCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of firstName attribute in entity class com.example.dvdrental.data.model.Customer"
input firstNameCustomerCriteria {
  "Logical AND criteria expression"
  AND: [firstNameCustomerCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [firstNameCustomerCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of firstName attribute in entity class com.example.dvdrental.data.model.Staff"
input firstNameStaffCriteria {
  "Logical AND criteria expression"
  AND: [firstNameStaffCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [firstNameStaffCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of fulltext attribute in entity class com.example.dvdrental.data.model.Film"
input fulltextFilmCriteria {
  "Logical AND criteria expression"
  AND: [fulltextFilmCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [fulltextFilmCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Actor"
input idActorCriteria {
  "Logical AND criteria expression"
  AND: [idActorCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idActorCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Address"
input idAddressCriteria {
  "Logical AND criteria expression"
  AND: [idAddressCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idAddressCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Category"
input idCategoryCriteria {
  "Logical AND criteria expression"
  AND: [idCategoryCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idCategoryCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.City"
input idCityCriteria {
  "Logical AND criteria expression"
  AND: [idCityCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idCityCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Country"
input idCountryCriteria {
  "Logical AND criteria expression"
  AND: [idCountryCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idCountryCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Customer"
input idCustomerCriteria {
  "Logical AND criteria expression"
  AND: [idCustomerCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idCustomerCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Film"
input idFilmCriteria {
  "Logical AND criteria expression"
  AND: [idFilmCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idFilmCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Inventory"
input idInventoryCriteria {
  "Logical AND criteria expression"
  AND: [idInventoryCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idInventoryCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Language"
input idLanguageCriteria {
  "Logical AND criteria expression"
  AND: [idLanguageCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idLanguageCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Payment"
input idPaymentCriteria {
  "Logical AND criteria expression"
  AND: [idPaymentCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idPaymentCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Rental"
input idRentalCriteria {
  "Logical AND criteria expression"
  AND: [idRentalCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idRentalCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Staff"
input idStaffCriteria {
  "Logical AND criteria expression"
  AND: [idStaffCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idStaffCriteria]
}

"Criteria expression specification of id attribute in entity class com.example.dvdrental.data.model.Store"
input idStoreCriteria {
  "Logical AND criteria expression"
  AND: [idStoreCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [idStoreCriteria]
}

"Criteria expression specification of lastName attribute in entity class com.example.dvdrental.data.model.Actor"
input lastNameActorCriteria {
  "Logical AND criteria expression"
  AND: [lastNameActorCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastNameActorCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of lastName attribute in entity class com.example.dvdrental.data.model.Customer"
input lastNameCustomerCriteria {
  "Logical AND criteria expression"
  AND: [lastNameCustomerCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastNameCustomerCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of lastName attribute in entity class com.example.dvdrental.data.model.Staff"
input lastNameStaffCriteria {
  "Logical AND criteria expression"
  AND: [lastNameStaffCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastNameStaffCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Actor"
input lastUpdateActorCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateActorCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateActorCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Address"
input lastUpdateAddressCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateAddressCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateAddressCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Category"
input lastUpdateCategoryCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateCategoryCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateCategoryCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.City"
input lastUpdateCityCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateCityCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateCityCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Country"
input lastUpdateCountryCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateCountryCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateCountryCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Customer"
input lastUpdateCustomerCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateCustomerCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateCustomerCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.FilmActor"
input lastUpdateFilmActorCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateFilmActorCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateFilmActorCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.FilmCategory"
input lastUpdateFilmCategoryCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateFilmCategoryCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateFilmCategoryCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Film"
input lastUpdateFilmCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateFilmCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateFilmCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Inventory"
input lastUpdateInventoryCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateInventoryCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateInventoryCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Language"
input lastUpdateLanguageCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateLanguageCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateLanguageCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Rental"
input lastUpdateRentalCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateRentalCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateRentalCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Staff"
input lastUpdateStaffCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateStaffCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateStaffCriteria]
}

"Criteria expression specification of lastUpdate attribute in entity class com.example.dvdrental.data.model.Store"
input lastUpdateStoreCriteria {
  "Logical AND criteria expression"
  AND: [lastUpdateStoreCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lastUpdateStoreCriteria]
}

"Criteria expression specification of length attribute in entity class com.example.dvdrental.data.model.Film"
input lengthFilmCriteria {
  "Logical AND criteria expression"
  AND: [lengthFilmCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [lengthFilmCriteria]
}

"Criteria expression specification of name attribute in entity class com.example.dvdrental.data.model.Category"
input nameCategoryCriteria {
  "Logical AND criteria expression"
  AND: [nameCategoryCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [nameCategoryCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of name attribute in entity class com.example.dvdrental.data.model.Language"
input nameLanguageCriteria {
  "Logical AND criteria expression"
  AND: [nameLanguageCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [nameLanguageCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of password attribute in entity class com.example.dvdrental.data.model.Staff"
input passwordStaffCriteria {
  "Logical AND criteria expression"
  AND: [passwordStaffCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [passwordStaffCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of paymentDate attribute in entity class com.example.dvdrental.data.model.Payment"
input paymentDatePaymentCriteria {
  "Logical AND criteria expression"
  AND: [paymentDatePaymentCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [paymentDatePaymentCriteria]
}

"Criteria expression specification of phone attribute in entity class com.example.dvdrental.data.model.Address"
input phoneAddressCriteria {
  "Logical AND criteria expression"
  AND: [phoneAddressCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [phoneAddressCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of picture attribute in entity class com.example.dvdrental.data.model.Staff"
input pictureStaffCriteria {
  "Logical AND criteria expression"
  AND: [pictureStaffCriteria]
  "Between criteria"
  BETWEEN: [[Byte]]
  "Equals criteria"
  EQ: [Byte]
  "Greater or Equals criteria"
  GE: [Byte]
  "Greater Then criteria"
  GT: [Byte]
  "In criteria"
  IN: [[Byte]]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: [Byte]
  "Less Then criteria"
  LT: [Byte]
  "Not Equals criteria"
  NE: [Byte]
  "Not In criteria"
  NIN: [[Byte]]
  "Not Between criteria"
  NOT_BETWEEN: [[Byte]]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [pictureStaffCriteria]
}

"Criteria expression specification of postalCode attribute in entity class com.example.dvdrental.data.model.Address"
input postalCodeAddressCriteria {
  "Logical AND criteria expression"
  AND: [postalCodeAddressCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [postalCodeAddressCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of releaseYear attribute in entity class com.example.dvdrental.data.model.Film"
input releaseYearFilmCriteria {
  "Logical AND criteria expression"
  AND: [releaseYearFilmCriteria]
  "Between criteria"
  BETWEEN: [Int]
  "Equals criteria"
  EQ: Int
  "Greater or Equals criteria"
  GE: Int
  "Greater Then criteria"
  GT: Int
  "In criteria"
  IN: [Int]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Int
  "Less Then criteria"
  LT: Int
  "Not Equals criteria"
  NE: Int
  "Not In criteria"
  NIN: [Int]
  "Not Between criteria"
  NOT_BETWEEN: [Int]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [releaseYearFilmCriteria]
}

"Criteria expression specification of rentalDate attribute in entity class com.example.dvdrental.data.model.Rental"
input rentalDateRentalCriteria {
  "Logical AND criteria expression"
  AND: [rentalDateRentalCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [rentalDateRentalCriteria]
}

"Criteria expression specification of rentalDuration attribute in entity class com.example.dvdrental.data.model.Film"
input rentalDurationFilmCriteria {
  "Logical AND criteria expression"
  AND: [rentalDurationFilmCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [rentalDurationFilmCriteria]
}

"Criteria expression specification of rentalRate attribute in entity class com.example.dvdrental.data.model.Film"
input rentalRateFilmCriteria {
  "Logical AND criteria expression"
  AND: [rentalRateFilmCriteria]
  "Between criteria"
  BETWEEN: [BigDecimal]
  "Equals criteria"
  EQ: BigDecimal
  "Greater or Equals criteria"
  GE: BigDecimal
  "Greater Then criteria"
  GT: BigDecimal
  "In criteria"
  IN: [BigDecimal]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: BigDecimal
  "Less Then criteria"
  LT: BigDecimal
  "Not Equals criteria"
  NE: BigDecimal
  "Not In criteria"
  NIN: [BigDecimal]
  "Not Between criteria"
  NOT_BETWEEN: [BigDecimal]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [rentalRateFilmCriteria]
}

"Criteria expression specification of replacementCost attribute in entity class com.example.dvdrental.data.model.Film"
input replacementCostFilmCriteria {
  "Logical AND criteria expression"
  AND: [replacementCostFilmCriteria]
  "Between criteria"
  BETWEEN: [BigDecimal]
  "Equals criteria"
  EQ: BigDecimal
  "Greater or Equals criteria"
  GE: BigDecimal
  "Greater Then criteria"
  GT: BigDecimal
  "In criteria"
  IN: [BigDecimal]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: BigDecimal
  "Less Then criteria"
  LT: BigDecimal
  "Not Equals criteria"
  NE: BigDecimal
  "Not In criteria"
  NIN: [BigDecimal]
  "Not Between criteria"
  NOT_BETWEEN: [BigDecimal]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [replacementCostFilmCriteria]
}

"Criteria expression specification of returnDate attribute in entity class com.example.dvdrental.data.model.Rental"
input returnDateRentalCriteria {
  "Logical AND criteria expression"
  AND: [returnDateRentalCriteria]
  "Between criteria"
  BETWEEN: [Instant]
  "Equals criteria"
  EQ: Instant
  "Greater or Equals criteria"
  GE: Instant
  "Greater Then criteria"
  GT: Instant
  "In criteria"
  IN: [Instant]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Instant
  "Less Then criteria"
  LT: Instant
  "Not Equals criteria"
  NE: Instant
  "Not In criteria"
  NIN: [Instant]
  "Not Between criteria"
  NOT_BETWEEN: [Instant]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [returnDateRentalCriteria]
}

"Criteria expression specification of specialFeatures attribute in entity class com.example.dvdrental.data.model.Film"
input specialFeaturesFilmCriteria {
  "Logical AND criteria expression"
  AND: [specialFeaturesFilmCriteria]
  "Between criteria"
  BETWEEN: [List]
  "Equals criteria"
  EQ: List
  "Greater or Equals criteria"
  GE: List
  "Greater Then criteria"
  GT: List
  "In criteria"
  IN: [List]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: List
  "Less Then criteria"
  LT: List
  "Not Equals criteria"
  NE: List
  "Not In criteria"
  NIN: [List]
  "Not Between criteria"
  NOT_BETWEEN: [List]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [specialFeaturesFilmCriteria]
}

"Criteria expression specification of storeId attribute in entity class com.example.dvdrental.data.model.Customer"
input storeIdCustomerCriteria {
  "Logical AND criteria expression"
  AND: [storeIdCustomerCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [storeIdCustomerCriteria]
}

"Criteria expression specification of storeId attribute in entity class com.example.dvdrental.data.model.Inventory"
input storeIdInventoryCriteria {
  "Logical AND criteria expression"
  AND: [storeIdInventoryCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [storeIdInventoryCriteria]
}

"Criteria expression specification of storeId attribute in entity class com.example.dvdrental.data.model.Staff"
input storeIdStaffCriteria {
  "Logical AND criteria expression"
  AND: [storeIdStaffCriteria]
  "Between criteria"
  BETWEEN: [Short]
  "Equals criteria"
  EQ: Short
  "Greater or Equals criteria"
  GE: Short
  "Greater Then criteria"
  GT: Short
  "In criteria"
  IN: [Short]
  "Is Null criteria"
  IS_NULL: Boolean
  "Less then or Equals criteria"
  LE: Short
  "Less Then criteria"
  LT: Short
  "Not Equals criteria"
  NE: Short
  "Not In criteria"
  NIN: [Short]
  "Not Between criteria"
  NOT_BETWEEN: [Short]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [storeIdStaffCriteria]
}

"Criteria expression specification of title attribute in entity class com.example.dvdrental.data.model.Film"
input titleFilmCriteria {
  "Logical AND criteria expression"
  AND: [titleFilmCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [titleFilmCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}

"Criteria expression specification of username attribute in entity class com.example.dvdrental.data.model.Staff"
input usernameStaffCriteria {
  "Logical AND criteria expression"
  AND: [usernameStaffCriteria]
  "Between criteria"
  BETWEEN: [String]
  "Case sensitive match criteria"
  CASE: String
  "Ends with criteria, case sensitive"
  ENDS: String
  "Ends with criteria, case insensitive"
  ENDS_: String
  "Equals criteria"
  EQ: String
  "Case equals case insensitive match criteria"
  EQ_: String
  "In criteria"
  IN: [String]
  "Is Null criteria"
  IS_NULL: Boolean
  "Like criteria, case sensitive"
  LIKE: String
  "Like criteria, case insensitive"
  LIKE_: String
  "Case insensitive match criteria"
  LOWER: String
  "Not Equals criteria"
  NE: String
  "Not equals case insensitive match criteria"
  NE_: String
  "Not In criteria"
  NIN: [String]
  "Not Between criteria"
  NOT_BETWEEN: [String]
  "Is Not Null criteria"
  NOT_NULL: Boolean
  "Logical OR criteria expression"
  OR: [usernameStaffCriteria]
  "Starts with criteria, case sensitive"
  STARTS: String
  "Starts with criteria, case insensitive"
  STARTS_: String
}
